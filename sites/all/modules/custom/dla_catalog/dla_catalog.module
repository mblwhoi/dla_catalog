<?php

/**
 * Implementation of hook_feeds_plugins().
 */
function dla_catalog_feeds_plugins() {
  $info = array();

  $info['DLACatalogNodeProcessor'] = array(
    'name' => 'DLA Catalog Node Processor',
    'description' => 'Creates nodes from a parsed DLA Catalog Records CSV file.',
    'handler' => array(
      'parent' => 'FeedsNodeProcessor',
      'class' => 'DLACatalogNodeProcessor',
      'file' => 'DLACatalogNodeProcessor.inc',
      'path' => drupal_get_path('module', 'dla_catalog') . '/feeds',
    ),
  );

  $info['DLACatalogTermProcessor'] = array(
    'name' => 'DLA Catalog Term Processor',
    'description' => 'Creates nodes from a parsed DLA Catalog Terms CSV file.',
    'handler' => array(
      'parent' => 'FeedsNodeProcessor',
      'class' => 'DLACatalogTermProcessor',
      'file' => 'DLACatalogTermProcessor.inc',
      'path' => drupal_get_path('module', 'dla_catalog') . '/feeds',
    ),
  );

  return $info;

  }


/**
 * Implementation of hook_feeds_enable().
 */
function dla_catalog_enable() {

  //clear the cache to display in Feeds as available plugin.
  cache_clear_all('plugins:feeds:plugins', 'cache');
}




/*
 * Helper function to format ISO 8601 date string into drupal-compatible date strings
 * will return array('value' => date), or
 * array('value' => start, 'value2' => end) if the iso date is
 * an interval
 */
function dla_catalog_node_processor_convert_ISO_date_to_drupal_dates($iso_date) {

  // array to hold converted dates
  $utc_dates = array();

  // first split the iso date (it could be an interval)
  $iso_dates = explode("/", $iso_date);

  foreach ($iso_dates as $iso_date){

    // skip if not a valid iso date
    if (! dla_catalog_node_processor_is_valid_iso_date($iso_date)){
      next;
    }

    // if date is just a year, add on month and day so that php
    // can recognize it
    if (preg_match('/^\d{4}$/', $iso_date)){
      $iso_date = sprintf("%s-01-01", $iso_date);
    }

    // convert date into PHP DateTime object
    $date_obj = new DateTime($iso_date);

    // Reformat the date into a full ISO date that date_make_date() will accept
    $iso_date_string = date_format_date($date_obj, 'custom', 'Y-m-d\TH:i:s');

    // Create a DateTime object with UTC timezone
    $utc_date = date_make_date($iso_date_string, 'UTC', DATE_DATETIME);

    // Format the UTC version of the DateTime
    $utc_date_string = date_format_date($utc_date, 'custom', 'Y-m-d\TH:i:s');

    // save the date
    $utc_dates[] = $utc_date_string;
  }

  // If there was one date, return an array like ('value' => $date)
  if (count($utc_dates) == 1){
    return array('value' => $utc_dates[0]);
  }

  // Else if there were two dates, return an array like
  // ('value' => $date1, 'value2' => $date2)
  elseif (count($utc_dates == 2)){
    return array(
                 'value' => $utc_dates[0],
                 'value2' => $utc_dates[1]
                 );
  }

  // Otherwise return nothing
  return null;

}

function dla_catalog_node_processor_is_valid_iso_date($iso_date){
  $validation_regex = '/^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/';

  return preg_match($validation_regex, $iso_date);
}
